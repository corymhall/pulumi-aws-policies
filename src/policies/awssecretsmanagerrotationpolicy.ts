// ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".
import * as aws from '@pulumi/aws';
import * as pulumi from '@pulumi/pulumi';

export interface AWSSecretsManagerRotationPolicyArgs {
  /**
   * The name of the role to attach the policy to.
   */
  roleName: pulumi.Input<string>;

  /**
   * Name of the Lambda Function
   */
  functionName: pulumi.Input<string>;
}

/**
 * Grants permissions to APIs required to rotate a secret in AWS Secrets Manager
 */
export class AWSSecretsManagerRotationPolicy extends pulumi.ComponentResource {
  constructor(name: string, args: AWSSecretsManagerRotationPolicyArgs, opts?: pulumi.ComponentResourceOptions) {
    super('aws-policies:index:AWSSecretsManagerRotationPolicy', name, args, opts);
    new aws.iam.RolePolicy(`${name}-policy`, {
      role: args.roleName,
      policy: {
        Version: '2012-10-17',
        Statement: [
          {
            Effect: 'Allow',
            Action: [
              'secretsmanager:DescribeSecret',
              'secretsmanager:GetSecretValue',
              'secretsmanager:PutSecretValue',
              'secretsmanager:UpdateSecretVersionStage',
            ],
            Resource: [
              pulumi.interpolate`arn:${aws.getPartitionOutput().partition}:secretsmanager:${aws.getRegionOutput().name}:${aws.getCallerIdentityOutput().accountId}:secret:*`,
            ],
            Condition: {
              StringEquals: {
                'secretsmanager:resource/AllowRotationLambdaArn': pulumi.interpolate`arn:${aws.getPartitionOutput().partition}:lambda:${aws.getRegionOutput().name}:${aws.getCallerIdentityOutput().accountId}:function:${args.functionName}`,
              },
            },
          },
          {
            Effect: 'Allow',
            Action: [
              'secretsmanager:GetRandomPassword',
            ],
            Resource: [
              pulumi.interpolate`*`,
            ],
          },
        ],
      }
    });
    this.registerOutputs({});
  }
}